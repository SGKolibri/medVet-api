generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

enum Role {
  ADMIN
  STUDENT
  TEACHER
  SECRETARY
}

model Student {
  id            String   @id @default(auto()) @map("_id") @db.ObjectId
  name          String
  cpf           String   @unique
  password_hash String
  email         String?  @unique
  registration  String   @unique
  course        String?
  shift         String?
  period        String?
  phone         String?
  status_delete Boolean  @default(false)
  role          Role     @default(STUDENT)
  created_at    DateTime @default(now())

  @@map("students") //trocar o nome da tabela
}

model Teacher {
  id            String   @id @default(auto()) @map("_id") @db.ObjectId
  name          String
  cpf           String   @unique
  password_hash String
  email         String?  @unique
  registration  String   @unique
  course        String?
  shift         String?
  phone         String?
  status_delete Boolean @default(false)
  role          Role     @default(TEACHER)
  created_at    DateTime @default(now())
  enchiridion  Enchiridion[]
  prescription Prescription[]

  @@map("teachers")
}

model Secretary {
  id            String   @id @default(auto()) @map("_id") @db.ObjectId
  name          String
  cpf           String   @unique
  password_hash String
  email         String?  @unique
  phone         String?
  status_delete Boolean @default(false)
  role          Role     @default(SECRETARY)
  created_at    DateTime @default(now())

  @@map("secretarys")
}

model Tutor {
  id            String    @id @default(auto()) @map("_id") @db.ObjectId
  sequence      String   @unique
  name          String
  cpf           String?   @unique
  email         String?   @unique
  phone         String
  adress        String?
  status_delete Boolean @default(false)
  animals       Animal[]
  consult       Consult[]
  created_at    DateTime  @default(now())

  @@map("tutors")
}

model Animal {
  id           String   @id @default(auto()) @map("_id") @db.ObjectId
  sequence     String   @unique
  name         String
  created_at   DateTime @default(now())
  species      String
  race         String?
  gender       String
  age          String
  coat         String?
  status_delete Boolean @default(false)
  tutor_id     String   @db.ObjectId
  tutor        Tutor    @relation(fields: [tutor_id], references: [id], onDelete: Cascade) // onDelete: Cascade -> deleta os animais do tutor
  enchiridion  Enchiridion[]
  prescription Prescription[]  
  weight       Weight[]
  attachements Attachment[]
  exames       Exame[]
  termosInternacao TermoResponsabilidadeInternacao[]
  termosConsulta TermoResponsabilidade[]
  @@map("animals")
}

model Consult {
  id          String   @id @default(auto()) @map("_id") @db.ObjectId
  sequence    String   @unique
  date        DateTime
  nameAnimal  String
  phone       String
  species     String
  description String?
  done        Boolean  @default(false)
  tutor       Tutor    @relation(fields: [tutor_id], references: [id], onDelete: Cascade)
  tutor_id    String   @db.ObjectId
  created_at  DateTime @default(now())

  @@map("consults")
}


model Enchiridion {
  id          String   @id @default(auto()) @map("_id") @db.ObjectId
  sequence    String   @unique
  animal       Animal    @relation(fields: [animal_id], references: [id], onDelete: Cascade)
  animal_id    String   @db.ObjectId
  teacher       Teacher    @relation(fields: [teacher_id], references: [id], onDelete: Cascade)
  teacher_id    String   @db.ObjectId
  date        DateTime
  history     String?
  reason_consult String?
  deworming     String?
  date_deworming  String?
  temperature String?
  frequency_cardiac   String?
  frequency_respiratory String?
  dehydration String?
  lymph_node String?
  type_mucous  String?
  whats_mucous  String?
  skin_annex String?
  system_circulatory String?
  system_respiratory String?
  system_digestive String?
  system_locomotor String?
  system_nervous  String?
  system_genitourinary String?
  others String?
  complementary_exams String?
  diagnosis String?
  trataments String?
  observations String?
  status_delete Boolean @default(false)
  created_at  DateTime @default(now())
  vaccination   Vaccination[]
  weight       Weight[] @relation("EnchiridionWeights")


  @@map("enchiridion")
}

model Vaccination {
  id String   @id @default(auto()) @map("_id") @db.ObjectId
  date String
  name String
  enchiridion  Enchiridion    @relation(fields: [enchiridion_id], references: [id], onDelete: Cascade)
  enchiridion_id    String   @db.ObjectId

  @@map("vaccination")
}


model Prescription {
  id          String   @id @default(auto()) @map("_id") @db.ObjectId
  status_delete Boolean @default(false)
  created_at  DateTime @default(now())
  animal       Animal    @relation(fields: [animal_id], references: [id], onDelete: Cascade)
  animal_id    String   @db.ObjectId
  teacher       Teacher    @relation(fields: [teacher_id], references: [id], onDelete: Cascade)
  teacher_id    String   @db.ObjectId
  image         String?
  medication Medication[]

  @@map("prescription")
}

model Medication{
  id          String   @id @default(auto()) @map("_id") @db.ObjectId
  use_type String
  pharmacy String?
  type String?
  unit String
  measurement String
  description String
  prescription_id String @db.ObjectId
  prescription Prescription @relation(fields: [prescription_id], references: [id], onDelete: Cascade)


  @@map("medication")
}

model Weight {
  id String @id @default(auto()) @map("_id") @db.ObjectId
  weight Float
  created_at  DateTime @default(now())
  animal_id String @db.ObjectId
  enchiridion_id String @db.ObjectId @unique
  animal Animal @relation(fields: [animal_id], references: [id])
  enchiridion Enchiridion @relation("EnchiridionWeights", fields: [enchiridion_id], references: [id], onDelete: Cascade)

  @@map("weights")
}

model Attachment {
  id String @id @default(auto()) @map("_id") @db.ObjectId
  animal_id String @db.ObjectId
  url_archive String
  
  name String
  animal Animal @relation(fields: [animal_id], references: [id], onDelete: Cascade)
}

model Exame {
  id               String          @id @default(auto()) @map("_id") @db.ObjectId
  
  // New fields to connect to animal and store request PDF
  animalId        String? @db.ObjectId
  animal          Animal? @relation(fields: [animalId], references: [id], onDelete: Cascade)
  solicitanteId   String? @db.ObjectId
  dataSolicitacao DateTime?
  situacao        String? @default("pendente") // pendente, aprovado, concluido, cancelado
  pdfRequest      Bytes?
  pdfRequestName  String?

  hemograma               Boolean @default(false)
  pesquisaHemoparasitas   Boolean @default(false)
  metodoHemoparasita      String? 
  outroHemotologia        String?

  altTGP                  Boolean @default(false)
  astTGO                  Boolean @default(false)
  fosfataseAlcalina       Boolean @default(false)
  ureia                   Boolean @default(false)
  creatinina              Boolean @default(false)
  outrosExamesBioquimicos String?

  citologiaMicroscopiaDireta  Boolean @default(false)
  citologiaMicroscopiaCorada  Boolean @default(false)
  pesquisaEctoparasitas       Boolean @default(false)
  outroCitologiaGeral         String?
  amostraCitologiaGeral       String?
  
  metodoDeColeta          String?
  urinaliseEAS            Boolean @default(false)
  urinaliseSedimento      Boolean @default(false)
  urinaliseOutroMetodo    String?

  coproMetodo             String?
  coproWilishowsky        Boolean @default(false)
  coproHoffmann           Boolean @default(false)
  coproMcMaster           Boolean @default(false)
  // coproExameDireto       Boolean @default(false)
  coproOutro              String?

  radiografiaSimples      Boolean @default(false)
  radiografiaContrastada  Boolean @default(false)
  outroRadiografia        String?
  regiaoRadiografia       String?
  posicao1                String?
  posicao2                String?

  ultrassonografia        Boolean @default(false)
  ultrassonografiaDoppler Boolean @default(false)
  outroUltrassonografia   String?

  culturaBacteriana       Boolean @default(false)
  culturaFungica          Boolean @default(false)
  testeAntimicrobianos    Boolean @default(false)
  outrosExames            String?

  reason String?
  observations String?
  createdAt DateTime @default(now())
}


model Receita {
  id String @id @default(auto()) @map("_id") @db.ObjectId
  
  duasVias Boolean @default(false) // se não for duas vias, é uma via só
  // relação com o animal?

  createdAt DateTime @default(now())
}

model TermoResponsabilidade {
  id              String   @id @default(auto()) @map("_id") @db.ObjectId
  nomeResponsavel String
  cpf             String
  endereco        String
  telefone        String
  cep             String
  animalId        String @db.ObjectId
  animal          Animal  @relation(fields: [animalId], references: [id], onDelete: Cascade)
  pdfContent      Bytes?
  pdfName         String?
  createdAt       DateTime @default(now())
}

model TermoResponsabilidadeInternacao {
  id              String   @id @default(auto()) @map("_id") @db.ObjectId
  nomeResponsavel String
  cpf             String
  animalId        String @db.ObjectId
  dataEntrada     DateTime @default(now())
  dataPrevistaSaida DateTime?
  motivoInternacao String
  observacoes     String?
  permissaoMedica Boolean @default(false)   
  animal          Animal  @relation(fields: [animalId], references: [id], onDelete: Cascade)
  pdfContent      Bytes?
  pdfName         String?
  createdAt       DateTime @default(now())

  @@map("termo_responsabilidade_internacao")
}

model TermoAutorizacaoAnestesia {
  id              String   @id @default(auto()) @map("_id") @db.ObjectId
  nomeResponsavel String
  cpf             String
  endereco        String
  animalId        String @db.ObjectId
  procedimento    String
  riscos          String?
  autorizaTransfusao Boolean @default(false)
  autorizaReanimacao Boolean @default(true)
  pdfContent      Bytes?
  pdfName         String?
  
  createdAt       DateTime @default(now())

  @@map("termo_autorizacao_anestesia")
}
